import os
import asyncio
from datetime import datetime, time, timedelta
from zoneinfo import ZoneInfo

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
moscow_tz = ZoneInfo("Europe/Moscow")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
reminders = {}  # {(chat_id, name): {'time_str': 'HH:MM', 'accepted': False}}
user_states = {}  # {chat_id: {'action': 'add'/'delete', 'name': ..., 'step': ...}}

scheduler = BackgroundScheduler()
scheduler.start()

bot_instance = None
event_loop = None

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="list")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ "–ø—Ä–∏–Ω—è–ª" –∏ "–æ—Ç–ª–æ–∂–∏—Ç—å"
def reminder_buttons(name):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è–ª", callback_data=f"accepted|{name}")
        ],
        [
            InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 15–º", callback_data=f"repeat|{name}|15"),
            InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 30–º", callback_data=f"repeat|{name}|30"),
            InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 1—á", callback_data=f"repeat|{name}|60"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ –≤–∏—Ç–∞–º–∏–Ω—ã üíä\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

async def send_reminder_async(chat_id: int, name: str, bot):
    key = (chat_id, name)
    data = reminders.get(key)
    if not data or data['accepted']:
        return False
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å {name}!",
            reply_markup=reminder_buttons(name)
        )
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

def send_reminder_sync(chat_id: int, name: str):
    global bot_instance, event_loop
    if bot_instance is None or event_loop is None:
        logging.error("Bot –∏–ª–∏ event loop –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    asyncio.run_coroutine_threadsafe(send_reminder_async(chat_id, name, bot_instance), event_loop)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    data = query.data

    if data == "add":
        user_states[chat_id] = {"action": "add", "step": "waiting_for_name"}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞:")
    elif data == "list":
        await list_reminders(update, context, from_callback=True)
    elif data == "delete":
        user_states[chat_id] = {"action": "delete", "step": "waiting_for_name"}
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        user_vitamins = [(name, info['time_str']) for (uid, name), info in reminders.items() if uid == chat_id]
        if not user_vitamins:
            await query.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu())
            user_states.pop(chat_id, None)
            return
        keyboard = []
        for name, time_str in user_vitamins:
            keyboard.append([InlineKeyboardButton(f"{name} –≤ {time_str}", callback_data=f"delvitamin|{name}")])
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∏—Ç–∞–º–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "cancel":
        user_states.pop(chat_id, None)
        await query.message.reply_text("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu())
    elif data.startswith("delvitamin|"):
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        name = data.split("|", 1)[1]
        key = (chat_id, name)
        job_id = f"{chat_id}_{name}"
        try:
            scheduler.remove_job(job_id)
        except Exception:
            pass
        if key in reminders:
            del reminders[key]
            await query.message.reply_text(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu())
        else:
            await query.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
        user_states.pop(chat_id, None)
    elif data.startswith("accepted|"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏–µ–º –≤–∏—Ç–∞–º–∏–Ω–∞
        name = data.split("|", 1)[1]
        key = (chat_id, name)
        if key in reminders:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            time_str = reminders[key]['time_str']
            hour, minute = map(int, time_str.split(":"))
            now = datetime.now(moscow_tz)
            next_time = datetime.combine(now.date(), time(hour, minute), tzinfo=moscow_tz) + timedelta(days=1)
            reminders[key]['accepted'] = False  # –°–±—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–µ

            job_id = f"{chat_id}_{name}"
            try:
                scheduler.remove_job(job_id)
            except Exception:
                pass
            scheduler.add_job(
                send_reminder_sync,
                trigger=IntervalTrigger(hours=1, start_date=next_time, timezone=moscow_tz),
                id=job_id,
                replace_existing=True,
                args=[chat_id, name]
            )

            await query.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ —Ç—ã –ø—Ä–∏–Ω—è–ª {name}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.", reply_markup=main_menu())
        else:
            await query.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
    elif data.startswith("repeat|"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        parts = data.split("|")
        if len(parts) != 3:
            await query.message.reply_text("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_menu())
            return
        name = parts[1]
        try:
            delay_min = int(parts[2])
        except ValueError:
            await query.message.reply_text("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–∏—Ç—å.", reply_markup=main_menu())
            return

        key = (chat_id, name)
        if key not in reminders:
            await query.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            return

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        job_id = f"{chat_id}_{name}"
        try:
            scheduler.remove_job(job_id)
        except Exception:
            pass

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        run_time = datetime.now(moscow_tz) + timedelta(minutes=delay_min)
        scheduler.add_job(
            send_reminder_sync,
            trigger=DateTrigger(run_date=run_time),
            id=f"{job_id}_repeat_{run_time.timestamp()}",
            replace_existing=False,
            args=[chat_id, name]
        )

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ accepted –Ω–µ –º–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–∫–ª—é—á–∞–ª–æ—Å—å

        await query.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {name} –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {delay_min} –º–∏–Ω—É—Ç.", reply_markup=main_menu())

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    state = user_states.get(chat_id)

    # –ü—Ä–∏–Ω—è—Ç–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (—Ç–µ–∫—Å—Ç–æ–º)
    for (uid, name), data in reminders.items():
        if uid == chat_id and text.lower() == f"{name.lower()} –ø—Ä–∏–Ω—è–ª":
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–∏–Ω—è–ª"
            time_str = data['time_str']
            hour, minute = map(int, time_str.split(":"))
            now = datetime.now(moscow_tz)
            next_time = datetime.combine(now.date(), time(hour, minute), tzinfo=moscow_tz) + timedelta(days=1)
            data['accepted'] = False

            job_id = f"{chat_id}_{name}"
            try:
                scheduler.remove_job(job_id)
            except Exception:
                pass
            scheduler.add_job(
                send_reminder_sync,
                trigger=IntervalTrigger(hours=1, start_date=next_time, timezone=moscow_tz),
                id=job_id,
                replace_existing=True,
                args=[chat_id, name]
            )

            await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ —Ç—ã –ø—Ä–∏–Ω—è–ª {name}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.", reply_markup=main_menu())
            return

    if not state:
        return

    if state["action"] == "add":
        if state["step"] == "waiting_for_name":
            state["name"] = text
            state["step"] = "waiting_for_time"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏):")
        elif state["step"] == "waiting_for_time":
            try:
                name = state["name"]
                time_str = text
                hour, minute = map(int, time_str.split(":"))
                now = datetime.now(moscow_tz)
                first_time = datetime.combine(now.date(), time(hour, minute), tzinfo=moscow_tz)
                if first_time < now:
                    first_time += timedelta(days=1)

                key = (chat_id, name)
                reminders[key] = {'time_str': time_str, 'accepted': False}

                job_id = f"{chat_id}_{name}"
                try:
                    scheduler.remove_job(job_id)
                except Exception:
                    pass

                scheduler.add_job(
                    send_reminder_sync,
                    trigger=IntervalTrigger(hours=1, start_date=first_time, timezone=moscow_tz),
                    id=job_id,
                    replace_existing=True,
                    args=[chat_id, name]
                )

                await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {time_str} (–ú–°–ö).", reply_markup=main_menu())
                del user_states[chat_id]
            except Exception as e:
                await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞: {e}")

    elif state["action"] == "delete":
        # –í —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç, —Ç–æ:
        name = text
        key = (chat_id, name)
        job_id = f"{chat_id}_{name}"

        try:
            scheduler.remove_job(job_id)
        except Exception:
            pass

        if key in reminders:
            del reminders[key]
            await update.message.reply_text(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu())
        else:
            await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
        del user_states[chat_id]

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback=False):
    chat_id = update.effective_chat.id
    user_reminders = []
    for (uid, name), data in reminders.items():
        if uid == chat_id:
            status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ" if data['accepted'] else "‚è≥ –ñ–¥—ë—Ç"
            user_reminders.append(f"{name} –≤ {data['time_str']} - {status}")
    text = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(user_reminders) if user_reminders else "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."

    if from_callback:
        await update.callback_query.message.reply_text(text, reply_markup=main_menu())
    else:
        await update.message.reply_text(text, reply_markup=main_menu())

def main():
    global bot_instance, event_loop
    app = ApplicationBuilder().token(TOKEN).build()
    bot_instance = app.bot
    event_loop = asyncio.get_event_loop()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_user_input))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
