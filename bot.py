import os
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime, time, timedelta
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –§–æ—Ä–º–∞—Ç: { (chat_id, name): {'time_str': 'HH:MM', 'accepted': False} }
reminders = {}

scheduler = BackgroundScheduler()
scheduler.start()

bot_instance = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
event_loop = None    # –ì–ª–∞–≤–Ω—ã–π asyncio event loop

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ –≤–∏—Ç–∞–º–∏–Ω—ã üíä\n\n"
        "üìå –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú>\n"
        "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ: /list\n"
        "üóë –£–¥–∞–ª–∏—Ç—å: /delete <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n"
        "‚úÖ –ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–Ω–∞–∑–≤–∞–Ω–∏–µ> –ø—Ä–∏–Ω—è–ª"
    )

async def send_reminder_async(chat_id: int, name: str, bot):
    key = (chat_id, name)
    data = reminders.get(key)
    if not data:
        return False
    if data['accepted']:
        return False
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {name} –≤ —á–∞—Ç {chat_id} –≤ {datetime.now()}")
        await bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å {name}!")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name} –¥–ª—è {chat_id}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

def send_reminder_sync(chat_id: int, name: str):
    global bot_instance, event_loop
    if bot_instance is None or event_loop is None:
        logging.error("Bot instance –∏–ª–∏ event loop –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return
    asyncio.run_coroutine_threadsafe(send_reminder_async(chat_id, name, bot_instance), event_loop)

async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú>\n–ü—Ä–∏–º–µ—Ä: /add –ú–∞–≥–Ω–∏–π 08:30")
        return

    name, time_str = args
    chat_id = update.effective_chat.id

    try:
        hour, minute = map(int, time_str.split(":"))
        now = datetime.now()
        first_time = datetime.combine(now.date(), time(hour, minute))
        if first_time < now:
            first_time += timedelta(days=1)

        key = (chat_id, name)
        reminders[key] = {'time_str': time_str, 'accepted': False}

        job_id = f"{chat_id}_{name}"
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            scheduler.remove_job(job_id)
        except Exception:
            pass

        scheduler.add_job(
            send_reminder_sync,
            trigger=IntervalTrigger(hours=1, start_date=first_time),
            id=job_id,
            replace_existing=True,
            args=[chat_id, name]
        )

        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å {time_str} –∏ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.")
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name} –¥–ª—è {chat_id} –Ω–∞ {time_str}")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_reminders = []
    for (uid, name), data in reminders.items():
        if uid == chat_id:
            status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ" if data['accepted'] else "‚è≥ –ñ–¥—ë—Ç"
            user_reminders.append(f"{name} –≤ {data['time_str']} - {status}")
    if user_reminders:
        text = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(user_reminders)
    else:
        text = "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    await update.message.reply_text(text)

async def delete_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /delete <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    name = args[0]
    job_id = f"{chat_id}_{name}"
    key = (chat_id, name)

    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass
    if key in reminders:
        del reminders[key]
        await update.message.reply_text(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def check_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    chat_id = update.effective_chat.id

    for (uid, name), data in list(reminders.items()):
        if uid == chat_id:
            accept_str = f"{name.lower()} –ø—Ä–∏–Ω—è–ª"
            if text == accept_str:
                reminders[(chat_id, name)]['accepted'] = True
                job_id = f"{chat_id}_{name}"
                try:
                    scheduler.remove_job(job_id)
                except Exception:
                    pass
                await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ —Ç—ã –ø—Ä–∏–Ω—è–ª {name}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
                logging.info(f"{chat_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—ë–º {name}")
                break

def main():
    global bot_instance, event_loop

    app = ApplicationBuilder().token(TOKEN).build()
    bot_instance = app.bot
    event_loop = asyncio.get_event_loop()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_reminder))
    app.add_handler(CommandHandler("list", list_reminders))
    app.add_handler(CommandHandler("delete", delete_reminder))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), check_acceptance))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
